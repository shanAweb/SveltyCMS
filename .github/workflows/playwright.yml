name: Playwright and Bun Tests (Direct Config Approach)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # Playwright tests
        test: [tests/playwright/user.spec.ts, tests/playwright/signupfirstuser.spec.ts, tests/playwright/oauth-signup-firstuser.spec.ts]
        # Bun tests
        bun: [bun-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Install TypeScript and ts-node for CI
      run: |
        echo "Installing TypeScript and ts-node for CI environment..."
        npm install -g typescript ts-node
        npm install --save-dev typescript ts-node @types/node
        echo "✅ TypeScript and ts-node installed successfully"
        echo "TypeScript version: $(tsc --version)"
        echo "ts-node version: $(ts-node --version)"

    - name: Setup SvelteKit configuration for CI (TypeScript Approach)
      run: |
        # Create .svelte-kit directory if it doesn't exist
        mkdir -p .svelte-kit
        
        # Create basic tsconfig.json for .svelte-kit (without circular dependency)
        cat > .svelte-kit/tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "allowJs": true,
            "checkJs": true,
            "esModuleInterop": true,
            "forceConsistentCasingInFileNames": true,
            "resolveJsonModule": true,
            "skipLibCheck": true,
            "strict": true,
            "moduleResolution": "bundler",
            "target": "ESNext",
            "module": "ESNext",
            "isolatedModules": true,
            "verbatimModuleSyntax": true,
            "sourceMap": true,
            "noErrorTruncation": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true
          }
        }
        EOF
        
        # Create a CI-specific tsconfig that works with ts-node
        cat > tsconfig.ci.json << 'EOF'
        {
          "extends": "./tsconfig.json",
          "compilerOptions": {
            "module": "ESNext",
            "moduleResolution": "node",
            "esModuleInterop": true,
            "allowSyntheticDefaultImports": true,
            "target": "ESNext"
          },
          "ts-node": {
            "esm": true,
            "experimentalSpecifierResolution": "node"
          }
        }
        EOF
        
        echo "✅ TypeScript configuration created for CI"
        echo "📁 Config directory contents:"
        ls -la config/
        
        # Keep original config files - ts-node will handle them
        echo "✅ Original TypeScript config files preserved for ts-node processing"

    - name: Build application with TypeScript support
      run: |
        echo "Building SvelteCMS with TypeScript support..."
        # Use ts-node to run the build process with proper TypeScript support
        NODE_OPTIONS="--loader ts-node/esm" bun run build
        if [ $? -ne 0 ]; then
          echo "Build failed. Checking config files..."
          ls -la config/
          cat config/public.ts
          cat config/private.ts
          exit 1
        fi

    - name: Start preview server
      run: |
        echo "Starting preview server..."
        bun run vite preview --port "4173" &
        echo $! > server.pid
        sleep 5

    - name: Wait for server to be ready
      run: |
        timeout 30s bash -c 'until curl -f http://localhost:4173 >/dev/null 2>&1; do echo "Waiting for server..."; sleep 3; done'

    - name: Run Playwright tests
      if: matrix.test
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Playwright test: ${{ matrix.test }}"
        npx playwright test ${{ matrix.test }} --workers 1
        echo "Playwright test completed: ${{ matrix.test }}"

    - name: Run Bun tests
      if: matrix.bun
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Bun tests..."
        mkdir -p test-results/bun
        bun test tests/bun --output-file test-results/bun/test-results.txt
        echo "Bun tests completed"

    - name: Stop preview server
      if: always()
      run: |
        if [ -f server.pid ]; then
          echo "Stopping preview server..."
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Restore original config files
      if: always()
      run: |
        echo "✅ No config files were modified - original files preserved"

    - name: Upload Playwright test results
      if: matrix.test
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results-${{ matrix.test }}
        path: test-results/playwright/?
        retention-days: 30

    - name: Upload Bun test results
      if: matrix.bun
      uses: actions/upload-artifact@v4
      with:
        name: bun-test-results
        path: test-results/bun/
        retention-days: 30
