name: Playwright and Bun Tests (Direct Config Approach)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # Playwright tests
        test: [tests/playwright/user.spec.ts, tests/playwright/signupfirstuser.spec.ts, tests/playwright/oauth-signup-firstuser.spec.ts]
        # Bun tests
        bun: [bun-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Setup SvelteKit configuration for CI (Direct Config Approach)
      run: |
        # Create .svelte-kit directory if it doesn't exist
        mkdir -p .svelte-kit
        
        # Create basic tsconfig.json for .svelte-kit (without circular dependency)
        cat > .svelte-kit/tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "allowJs": true,
            "checkJs": true,
            "esModuleInterop": true,
            "forceConsistentCasingInFileNames": true,
            "resolveJsonModule": true,
            "skipLibCheck": true,
            "strict": true,
            "moduleResolution": "bundler",
            "target": "ESNext",
            "module": "ESNext",
            "isolatedModules": true,
            "verbatimModuleSyntax": true,
            "sourceMap": true,
            "noErrorTruncation": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true
          }
        }
        EOF
        
        # Create CI-specific config files that work without TypeScript imports
        # Create config/public.ci.js (plain JavaScript)
        cat > config/public.ci.js << 'EOF'
        export const publicEnv = {
            // --- Site Configuration ---
            SITE_NAME: 'SveltyCMS',
            PASSWORD_LENGTH: 8,

            // --- Language Configuration ---
            DEFAULT_CONTENT_LANGUAGE: 'en',
            AVAILABLE_CONTENT_LANGUAGES: [
                "en",
                "de"
            ],
            BASE_LOCALE: 'en',
            LOCALES: [
                "en",
                "de",
                "fr",
                "es"
            ],

            // --- Media Configuration ---
            MEDIA_FOLDER: 'mediaFiles',
            MEDIA_OUTPUT_FORMAT_QUALITY: {
                format: 'avif',
                quality: 80
            },
            IMAGE_SIZES: {
                "sm": 600,
                "md": 900,
                "lg": 1200
            },
            MAX_FILE_SIZE: 104857600,
            BODY_SIZE_LIMIT: 1048576,
            USE_ARCHIVE_ON_DELETE: true,

            // --- Host Configuration ---
            HOST_DEV: 'http://localhost:4173',
            HOST_PROD: 'http://localhost:4173',

            // --- Logging ---
            LOG_LEVELS: [
                "error"
            ],
            LOG_RETENTION_DAYS: 2,
            LOG_ROTATION_SIZE: 5242880,

            // --- Theming ---
            SEASONS: false,

            // --- Demo Mode ---
            DEMO: false,
        };
        EOF
        
        # Create config/private.ci.js (plain JavaScript)
        cat > config/private.ci.js << 'EOF'
        export const privateEnv = {
            // --- Database Configuration ---
            DB_TYPE: 'mongodb',
            DB_HOST: 'mongodb://localhost',
            DB_PORT: 27017,
            DB_NAME: 'SveltyCMS',
            DB_USER: 'root',
            DB_PASSWORD: 'password',
            DB_RETRY_ATTEMPTS: 3,
            DB_RETRY_DELAY: 3000,
            DB_POOL_SIZE: 5,
            MULTI_TENANT: false,

            // --- SMTP Configuration ---
            SMTP_HOST: 'dummy.email.service',
            SMTP_PORT: 25,
            SMTP_EMAIL: 'dev@localhost.com',
            SMTP_PASSWORD: 'dummy_password',

            // --- Redis Caching ---
            USE_REDIS: false,

            // --- Session Management ---
            SESSION_CLEANUP_INTERVAL: 60000,
            MAX_IN_MEMORY_SESSIONS: 10000,
            DB_VALIDATION_PROBABILITY: 0.1,
            SESSION_EXPIRATION_SECONDS: 3600,

            // --- Google OAuth ---
            USE_GOOGLE_OAUTH: false,

            // --- Other APIs ---
            USE_MAPBOX: false,
            USE_TIKTOK: false,

            // --- LLM APIs ---
            LLM_APIS: {},

            // --- JWT Secret ---
            JWT_SECRET_KEY: 'e98eb41c117ed38f73a45b00a1d97803369cc1246c1c836bb344a48207aeea63',

            // --- Two-Factor Authentication ---
            USE_2FA: false,
            TWO_FACTOR_AUTH_BACKUP_CODES_COUNT: 10,

            // --- Roles & Permissions ---
            ROLES: [
                "admin",
                "editor"
            ],
            PERMISSIONS: [
                "manage",
                "edit",
                "create"
            ],
        };
        EOF
        
        # Create config/types.ci.js to replace the types import
        cat > config/types.ci.js << 'EOF'
        // CI-specific types that provide the same interface without TypeScript complexity
        export const createPublicConfig = (config) => config;
        export const createPrivateConfig = (config) => config;
        
        // Basic validation schemas for CI
        export const publicConfigSchema = {
            validate: () => ({ success: true }),
            parse: (data) => data
        };
        
        export const privateConfigSchema = {
            validate: () => ({ success: true }),
            parse: (data) => data
        };
        
        export const validateConfig = (schema, config, name) => {
            console.log(`✅ Validating ${name}...`);
            return true;
        };
        EOF
        
        # Backup original config files and replace with CI versions
        cp config/public.ts config/public.ts.backup
        cp config/private.ts config/private.ts.backup
        cp config/types.ts config/types.ts.backup
        
        # Replace the files with CI versions
        cp config/public.ci.js config/public.ts
        cp config/private.ci.js config/private.ts
        cp config/types.ci.js config/types.ts
        
        # Remove the .ci.js files
        rm config/public.ci.js config/private.ci.js config/types.ci.js
        
        echo "✅ CI config files created successfully"
        echo "📁 Config directory contents:"
        ls -la config/

    - name: Build application with CI config
      run: |
        echo "Building SvelteCMS with CI-specific config..."
        bun run build
        if [ $? -ne 0 ]; then
          echo "Build failed. Checking config files..."
          ls -la config/
          cat config/public.ts
          cat config/private.ts
          exit 1
        fi

    - name: Start preview server
      run: |
        echo "Starting preview server..."
        bun run vite preview --port "4173" &
        echo $! > server.pid
        sleep 5

    - name: Wait for server to be ready
      run: |
        timeout 30s bash -c 'until curl -f http://localhost:4173 >/dev/null 2>&1; do echo "Waiting for server..."; sleep 3; done'

    - name: Run Playwright tests
      if: matrix.test
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Playwright test: ${{ matrix.test }}"
        npx playwright test ${{ matrix.test }} --workers 1
        echo "Playwright test completed: ${{ matrix.test }}"

    - name: Run Bun tests
      if: matrix.bun
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Bun tests..."
        mkdir -p test-results/bun
        bun test tests/bun --output-file test-results/bun/test-results.txt
        echo "Bun tests completed"

    - name: Stop preview server
      if: always()
      run: |
        if [ -f server.pid ]; then
          echo "Stopping preview server..."
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Restore original config files
      if: always()
      run: |
        if [ -f config/public.ts.backup ]; then
          mv config/public.ts.backup config/public.ts
        fi
        if [ -f config/private.ts.backup ]; then
          mv config/private.ts.backup config/private.ts
        fi
        if [ -f config/types.ts.backup ]; then
          mv config/types.ts.backup config/types.ts
        fi

    - name: Upload Playwright test results
      if: matrix.test
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results-${{ matrix.test }}
        path: test-results/playwright/
        retention-days: 30

    - name: Upload Bun test results
      if: matrix.bun
      uses: actions/upload-artifact@v4
      with:
        name: bun-test-results
        path: test-results/bun/
        retention-days: 30
