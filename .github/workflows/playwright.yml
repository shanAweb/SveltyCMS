name: Playwright and Bun Tests (Direct Config Approach)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # Playwright tests
        test: [tests/playwright/user.spec.ts, tests/playwright/signupfirstuser.spec.ts, tests/playwright/oauth-signup-firstuser.spec.ts]
        # Bun tests
        bun: [bun-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Install TypeScript and ts-node for CI
      run: |
        echo "Installing TypeScript and ts-node for CI environment..."
        npm install -g typescript ts-node --legacy-peer-deps
        echo "✅ TypeScript and ts-node installed successfully"
        echo "TypeScript version: $(tsc --version)"
        echo "ts-node version: $(ts-node --version)"

    - name: Setup SvelteKit configuration for CI (TypeScript Approach)
      run: |
        # Create .svelte-kit directory if it doesn't exist
        mkdir -p .svelte-kit
        
        # Create basic tsconfig.json for .svelte-kit (without circular dependency)
        cat > .svelte-kit/tsconfig.json << 'EOF'
        {
          "compilerOptions": {
            "allowJs": true,
            "checkJs": true,
            "esModuleInterop": true,
            "forceConsistentCasingInFileNames": true,
            "resolveJsonModule": true,
            "skipLibCheck": true,
            "strict": true,
            "moduleResolution": "bundler",
            "target": "ESNext",
            "module": "ESNext",
            "isolatedModules": true,
            "verbatimModuleSyntax": true,
            "sourceMap": true,
            "noErrorTruncation": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true
          }
        }
        EOF
        
        # Create a CI-specific tsconfig that works with ts-node
        cat > tsconfig.ci.json << 'EOF'
        {
          "extends": "./tsconfig.json",
          "compilerOptions": {
            "module": "ESNext",
            "moduleResolution": "node",
            "esModuleInterop": true,
            "allowSyntheticDefaultImports": true,
            "target": "ESNext"
          },
          "ts-node": {
            "esm": true,
            "experimentalSpecifierResolution": "node"
          }
        }
        EOF
        
        # Create backup JavaScript config files in case ts-node fails
        cat > config/public.js.backup << 'EOF'
        export const publicEnv = {
            SITE_NAME: 'SveltyCMS',
            PASSWORD_LENGTH: 8,
            DEFAULT_CONTENT_LANGUAGE: 'en',
            AVAILABLE_CONTENT_LANGUAGES: ["en", "de"],
            BASE_LOCALE: 'en',
            LOCALES: ["en", "de", "fr", "es"],
            MEDIA_FOLDER: 'mediaFiles',
            MEDIA_OUTPUT_FORMAT_QUALITY: { format: 'avif', quality: 80 },
            IMAGE_SIZES: { "sm": 600, "md": 900, "lg": 1200 },
            MAX_FILE_SIZE: 104857600,
            BODY_SIZE_LIMIT: 1048576,
            USE_ARCHIVE_ON_DELETE: true,
            HOST_DEV: 'http://localhost:4173',
            HOST_PROD: 'http://localhost:4173',
            LOG_LEVELS: ["error"],
            LOG_RETENTION_DAYS: 2,
            LOG_ROTATION_SIZE: 5242880,
            SEASONS: false,
            DEMO: false,
        };
        EOF
        
        cat > config/private.js.backup << 'EOF'
        export const privateEnv = {
            DB_TYPE: 'mongodb',
            DB_HOST: 'mongodb://localhost',
            DB_PORT: 27017,
            DB_NAME: 'SveltyCMS',
            DB_USER: 'root',
            DB_PASSWORD: 'password',
            DB_RETRY_ATTEMPTS: 3,
            DB_RETRY_DELAY: 3000,
            DB_POOL_SIZE: 5,
            MULTI_TENANT: false,
            SMTP_HOST: 'dummy.email.service',
            SMTP_PORT: 25,
            SMTP_EMAIL: 'dev@localhost.com',
            SMTP_PASSWORD: 'dummy_password',
            USE_REDIS: false,
            SESSION_CLEANUP_INTERVAL: 60000,
            MAX_IN_MEMORY_SESSIONS: 10000,
            DB_VALIDATION_PROBABILITY: 0.1,
            SESSION_EXPIRATION_SECONDS: 3600,
            USE_GOOGLE_OAUTH: false,
            USE_MAPBOX: false,
            USE_TIKTOK: false,
            LLM_APIS: {},
            JWT_SECRET_KEY: 'e98eb41c117ed38f73a45b00a1d97803369cc1246c1c836bb344a48207aeea63',
            USE_2FA: false,
            TWO_FACTOR_AUTH_BACKUP_CODES_COUNT: 10,
            ROLES: ["admin", "editor"],
            PERMISSIONS: ["manage", "edit", "create"],
        };
        EOF
        
        echo "✅ TypeScript configuration created for CI"
        echo "✅ Backup JavaScript config files created"
        echo "📁 Config directory contents:"
        ls -la config/
        
        # Keep original config files - ts-node will handle them
        echo "✅ Original TypeScript config files preserved for ts-node processing"

    - name: Build application with TypeScript support
      run: |
        echo "Building SvelteCMS with TypeScript support..."
        # Use ts-node to run the build process with proper TypeScript support
        NODE_OPTIONS="--loader ts-node/esm" bun run build
        if [ $? -ne 0 ]; then
          echo "❌ ts-node build failed, trying JavaScript fallback approach..."
          echo "Replacing TypeScript config files with JavaScript versions..."
          
          # Backup original TypeScript files
          cp config/public.ts config/public.ts.original
          cp config/private.ts config/private.ts.original
          
          # Replace with JavaScript versions
          cp config/public.js.backup config/public.ts
          cp config/private.js.backup config/private.ts
          
          echo "✅ Config files replaced with JavaScript versions"
          echo "📁 Config directory contents:"
          ls -la config/
          
          # Try build again with JavaScript configs
          echo "🔄 Retrying build with JavaScript config files..."
          bun run build
          if [ $? -ne 0 ]; then
            echo "❌ JavaScript fallback also failed. Checking config files..."
            ls -la config/
            cat config/public.ts
            cat config/private.ts
            exit 1
          fi
        fi

    - name: Start preview server
      run: |
        echo "Starting preview server..."
        bun run vite preview --port "4173" &
        echo $! > server.pid
        sleep 5

    - name: Wait for server to be ready
      run: |
        timeout 30s bash -c 'until curl -f http://localhost:4173 >/dev/null 2>&1; do echo "Waiting for server..."; sleep 3; done'

    - name: Run Playwright tests
      if: matrix.test
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Playwright test: ${{ matrix.test }}"
        npx playwright test ${{ matrix.test }} --workers 1
        echo "Playwright test completed: ${{ matrix.test }}"

    - name: Run Bun tests
      if: matrix.bun
      env:
        API_BASE_URL: 'http://localhost:4173'
      run: |
        echo "Running Bun tests..."
        mkdir -p test-results/bun
        bun test tests/bun --output-file test-results/bun/test-results.txt
        echo "Bun tests completed"

    - name: Stop preview server
      if: always()
      run: |
        if [ -f server.pid ]; then
          echo "Stopping preview server..."
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Restore original config files
      if: always()
      run: |
        echo "🔄 Restoring original TypeScript config files..."
        
        # If we used the JavaScript fallback, restore from .original backup
        if [ -f config/public.ts.original ]; then
          mv config/public.ts.original config/public.ts
          echo "✅ Restored public.ts from original backup"
        fi
        
        if [ -f config/private.ts.original ]; then
          mv config/private.ts.original config/private.ts
          echo "✅ Restored private.ts from original backup"
        fi
        
        # Clean up backup files
        rm -f config/public.js.backup config/private.js.backup
        rm -f config/public.ts.original config/private.ts.original
        
        echo "✅ Original TypeScript config files restored and cleanup completed"

    - name: Upload Playwright test results
      if: matrix.test
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results-${{ matrix.test }}
        path: test-results/playwright/?
        retention-days: 30

    - name: Upload Bun test results
      if: matrix.bun
      uses: actions/upload-artifact@v4
      with:
        name: bun-test-results
        path: test-results/bun/
        retention-days: 30
